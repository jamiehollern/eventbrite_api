<?php

/**
 * @file
 * Provides the main features and functions for the Eventbrite API module.
 */

/**
 * Implements hook_init().
 */
function eventbrite_api_init() {
  // Globally load the Eventbrite API.
  $eventbrite = libraries_load('eventbrite');
  // Load our functions.
  module_load_include('inc', 'eventbrite_api', 'includes/functions');
}

/**
 * Implements hook_permission().
 */
function eventbrite_api_permission() {
  $permissions = array(
    'administer eventbrite_api config' => array(
      'title' => t('Configure Eventbrite settings'),
      'description' => t('Allows users to update Eventbrite settings.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_libraries_info().
 */
function eventbrite_api_libraries_info() {
  $libraries['eventbrite'] = array(
    'name' => 'eventbrite.php',
    'vendor url' => 'https://github.com/ryanjarvinen/eventbrite.php',
    'download url' => 'https://raw.github.com/ryanjarvinen/eventbrite.php/master/Eventbrite.php',
    // There isn't a version number anywhere to be found, so we have to hardcode this.
    'version' => 1,
    'files' => array(
      'php' => array(
        'eventbrite.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_entity_info().
 */
function eventbrite_api_entity_info() {
  $return = array(
    'eventbrite_api_event' => array(
      'label' => t('Eventbrite Event'),
      'plural label' => t('Eventbrite Events'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_events',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
    'eventbrite_api_organizer' => array(
      'label' => t('Eventbrite Organizer'),
      'plural label' => t('Eventbrite Organizers'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_organizers',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'oid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
    'eventbrite_api_ticket' => array(
      'label' => t('Eventbrite Ticket'),
      'plural label' => t('Eventbrite Tickets'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_tickets',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
    'eventbrite_api_venue' => array(
      'label' => t('Eventbrite Venue'),
      'plural label' => t('Eventbrite Venues'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_venues',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'vid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
  return $return;
}

/**
 * Implementation of hook_cron_queue_info()
 */
function eventbrite_api_cron_queue_info() {
  $queues['eventbrite_api_import'] = array(
    'worker callback' => 'eventbrite_api_entity_import',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function eventbrite_api_cron() {
  $cron = variable_get('eventbrite_api_cron_import', 1);
  // Only do this is the config is set.
  if ($cron == 1) {
    // Instantiate Eventbrite.
    $eb_client = eb_connect();
    // Get a list of events.
    $items = eb_get_data($eb_client);
    // Put everything in a queue for processing.
    $queue = DrupalQueue::get('eventbrite_api_import');
    foreach($items as $item) {
      $queue->createItem($item);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function eventbrite_api_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'eventbrite_api') . '/views',
  );
}
