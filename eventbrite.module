<?php

/**
 * @file
 * Provides the main hooks and functionality for the Eventbrite module.
 */

/**
 * Implements hook_init().
 */
function eventbrite_init() {
  // Globally load the Eventbrite class.
  $eventbrite = libraries_load('eventbrite');
}

/**
 * Implements hook_menu().
 */ 
function eventbrite_menu() {
  $items = array();
  $items['admin/eventbrite'] = array(
    'title' => t('Eventbrite'),
    'description' => t('Administer Eventbrite.'),
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
	// The page admin/eventbrite/events is controlled by a view.
  /*$items['admin/eventbrite/events/add'] = array(
    'title' => 'Add an event',
    'description' => 'Add a new event to Eventbrite.',
    'page callback' => 'eventbrite_events_add_page',
    'access arguments' => array('access administration pages'),
    'weight' => 10,
    'file' => 'includes/eventbrite.events.inc',
  );
	$items['admin/eventbrite/events/add'] = array(
    'title' => 'Add event',
    'description' => 'Add a new event to Eventbrite.',
    'page callback' => 'commerce_product_ui_product_form_wrapper',
    //'page arguments' => array(commerce_product_new($type)),
    //'access callback' => 'commerce_product_access',
    //'access arguments' => array('create', commerce_product_new($type)),
    'file' => 'includes/commerce_product_ui.products.inc',
  );*/
  $items['admin/eventbrite/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure the Eventbrite module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_config_form'),
    'access arguments' => array('administer eventbrite config'),
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes',
    'file' => 'eventbrite.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function eventbrite_permission() {
  $permissions = array(
    'administer eventbrite config' => array(
      'title' => t('Configure Eventbrite settings'),
      'description' => t('Allows users to update Eventbrite settings.'),
      'restrict access' => TRUE,
    ),
    'administer eventbrite data' => array(
      'title' => t('Manage Eventbrite data'),
      'description' => t('Allows users to manage Eventbrite data.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_libraries_info().
 */
function eventbrite_libraries_info() {
  $libraries['eventbrite'] = array(
    'name' => 'eventbrite.php',
    'vendor url' => 'https://github.com/ryanjarvinen/eventbrite.php',
    'download url' => 'https://raw.github.com/ryanjarvinen/eventbrite.php/master/Eventbrite.php',
    // There isn't a version number anywhere to be found, so we have to hardcode this.
    'version' => 1,
    'files' => array(
      'php' => array(
        'eventbrite.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_entity_info().
 */
function eventbrite_entity_info() {
  $return = array(
    'eventbrite_event' => array(
      'label' => t('Eventbrite Event'),
      'plural label' => t('Eventbrite Events'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_events',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
	    /*'admin ui' => array(
        'path' => 'admin/content/models',
        'file' => 'eventbrite.admin.inc',
        'controller class' => 'EventUIController',
        'menu wildcard' => '%event',
      ),*/
    ),
    'eventbrite_organizer' => array(
      'label' => t('Eventbrite Organizer'),
      'plural label' => t('Eventbrite Organizers'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_organizers',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'oid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
    'eventbrite_ticket' => array(
      'label' => t('Eventbrite Ticket'),
      'plural label' => t('Eventbrite Tickets'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_tickets',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
    'eventbrite_venue' => array(
      'label' => t('Eventbrite Venue'),
      'plural label' => t('Eventbrite Venues'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_venues',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'vid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
  return $return;
}

/**
 * Implementation of hook_cron_queue_info()
 */
function eventbrite_cron_queue_info() {
	module_load_include('inc', 'eventbrite', 'includes/eventbrite.admin');
  $queues['eventbrite_import'] = array(
    'worker callback' => 'eventbrite_entity_import',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function eventbrite_cron() {
  $cron = variable_get('eventbrite_cron_import', 1);
  // Only do this is the config is set.
  if ($cron == 1) {
    // Instantiate Eventbrite.
	  $eb = new eb();
    // Get a list of events.
    $items = $eb->get_data();
		// Get rid of existing data.
		$eb->delete_all();
    // Put everything in a queue for processing.
    $queue = DrupalQueue::get('eventbrite_import');
    foreach($items as $item) {
      $queue->createItem($item);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function eventbrite_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'eventbrite') . '/views',
  );
}

/**
 * Load an event.
 */
function event_load($event_id, $reset = FALSE) {
  $events = event_load_multiple(array($event_id), array(), $reset);
  return reset($events);
}

/**
 * Load multiple events.
 */
function event_load_multiple($event_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('event', $event_ids, $conditions, $reset);
}

/**
 * Deletes a event.
 */
function event_delete(Event $event) {
  $event->delete();
}

/**
 * Delete multiple events.
 */
function event_delete_multiple(array $event_ids) {
  entity_get_controller('event')->delete($event_ids);
}

/**
 * Create a event object.
 */
function event_create($values = array()) {
  return entity_get_controller('event')->create($values);
}

/**
 * Saves a event to the database.
 */
function event_save(Event $event) {
  return $event->save();
}

/**
 * The class used for model entities
 */
class Event extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'event');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'model/' . $this->model_id);
  }
  
}
