<?php

/**
 * @file
 * Provides the main hooks and functionality for the Eventbrite module.
 */

/**
 * Implements hook_init().
 */
function eventbrite_init() {
  // Globally load the Eventbrite class.
  $eventbrite = libraries_load('eventbrite');
  // Load "global" functions.
  $functions = module_load_include('inc', 'eventbrite', 'includes/eventbrite.functions');
}

/**
 * Implements hook_libraries_info().
 */
function eventbrite_libraries_info() {
  $libraries['eventbrite'] = array(
    'name' => 'eventbrite.php',
    'vendor url' => 'https://github.com/ryanjarvinen/eventbrite.php',
    'download url' => 'https://raw.github.com/ryanjarvinen/eventbrite.php/master/Eventbrite.php',
    // There isn't a version number anywhere to be found, so we have to hardcode this.
    'version' => 1,
    'files' => array(
      'php' => array(
        'eventbrite.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function eventbrite_menu() {
  $items = array();
  $path = 'admin/eventbrite';
  // Top level Eventbrite container.
  $items[$path] = array(
    'title' => 'Eventbrite',
    'description' => 'Administer Eventbrite data.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  // Intermediate path ['admin/eventbrite/event'] is handled by a view.
  // Add an event.
  $items[$path . '/event/add'] = array(
    'title' => t('Add an event'),
    'page callback' => 'event_add_wrapper',
    'access arguments' => array('edit'),
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes/',
    'file' => 'eventbrite.forms.inc',
  );
  // Edit an event.
  $items[$path . '/event/%event'] = array(
    'title' => t('Edit an event'),
    'page callback' => 'event_edit_wrapper',
    'page arguments' => array(3),
    'access arguments' => array('edit'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes/',
    'file' => 'eventbrite.forms.inc',
  );
  $items[$path . '/event/%event/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  // Delete an event.
  $items[$path . '/event/%event/delete'] = array(
    'title' => t('Delete an event'),
    'page callback' => 'event_delete_wrapper',
    'page arguments' => array(3),
    'access arguments' => array('edit'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes/',
    'file' => 'eventbrite.forms.inc',
  );
  // Config page.
  $items['admin/eventbrite/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure settings for Eventbrite.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/eventbrite.forms.inc',
    'weight' => 50,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function eventbrite_entity_info(){
  $entities = array(
    'event' => array(
      'label' => t('Event'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_events',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'label' => 'title',
      ),
      'static cache' => TRUE,
      'load hook' => 'event_load',
    ),
    'organizer' => array(
      'label' => t('Organizer'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_organizers',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'oid',
        'label' => 'name',
      ),
      'static cache' => TRUE,
    ),
    'ticket' => array(
      'label' => t('Ticket'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_tickets',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'label' => 'name',
      ),
      'static cache' => TRUE,
    ),
    'venue' => array(
      'label' => t('Venue'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_venues',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'vid',
        'label' => 'name',
      ),
      'static cache' => TRUE,
    ),
  );
  return $entities;
}

/**
 * Implements hook_views_api().
 */
function eventbrite_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'eventbrite') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function eventbrite_permission() {
  $permissions = array(
    'administer eventbrite' => array(
      'title' => t('administer eventbrite'),
      'description' => t('Edit and delete all events'),
    ),
  );
  return $permissions;  
}

/**
 * Implements hook_field_create_field().
 *
 * See _eventbrite_alter_field().
 */
function eventbrite_field_create_field($field) {
	_eventbrite_alter_field($field);
}

/**
 * Implements hook_field_update_field().
 *
 * See _eventbrite_alter_field().
 */
function eventbrite_field_update_field($field, $prior_field, $has_data) {
	_eventbrite_alter_field($field);
}

function event_load($eid = NULL, $reset = FALSE) {
  $eids = (isset ($eid) ? array($eid) : array());
  $event = event_load_multiple($eids, $reset);
  return $event ? reset ($event) : FALSE;
}

function event_load_multiple($eids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('event', $eids, $conditions, $reset);
}
