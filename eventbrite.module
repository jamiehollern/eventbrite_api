<?php

/**
 * @file
 * Provides the main hooks and functionality for the Eventbrite module.
 */

/**
 * Implements hook_init().
 */
function eventbrite_init() {
  // Globally load the Eventbrite class.
  $eventbrite = libraries_load('eventbrite');
	// Load "global" functions.
  module_load_include('inc', 'eventbrite', 'eventbrite.functions');
}

/**
 * Implements hook_entity_info().
 */
function eventbrite_entity_info() {
  $return['event'] = array(
    'label' => t('Eventbrite'),
    'entity class' => 'Event',
    'controller class' => 'EventController',
    'base table' => 'eventbrite_events',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'eid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'event_create',
    'access callback' => 'event_access',
    'module' => 'eventbrite',
    'admin ui' => array(
      'path' => 'admin/eventbrite',
      'file' => 'eventbrite.admin.inc',
      'controller class' => 'EventbriteUIController',
      'menu wildcard' => '%event',
    ),
  );
  return $return;
}

/**
 * Implements hook_libraries_info().
 */
function eventbrite_libraries_info() {
  $libraries['eventbrite'] = array(
    'name' => 'eventbrite.php',
    'vendor url' => 'https://github.com/ryanjarvinen/eventbrite.php',
    'download url' => 'https://raw.github.com/ryanjarvinen/eventbrite.php/master/Eventbrite.php',
    // There isn't a version number anywhere to be found, so we have to hardcode this.
    'version' => 1,
    'files' => array(
      'php' => array(
        'eventbrite.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_views_api().
 */
function eventbrite_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'eventbrite') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function eventbrite_permission() {
  $permissions = array(
    'administer events' => array(
      'title' => t('Administer events'),
      'description' => t('Edit and delete all events'),
    ),
    'edit any event' => array(
      'title' => t('Edit any event'),
    ),
    'view any event' => array(
      'title' => t('View any event'),
    ),
  );
  return $permissions;  
}

/**
 * Determines whether the given user has access to an event.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $event
 *   Optionally an event or an event type to check access for. If nothing is
 *   given, access for all events is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function event_access($op, $event = NULL, $account = NULL) {
  if (user_access('administer events', $account)) {
    return TRUE;
  }
  if (isset($event)) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any event", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Fetch an event object. Make sure that the wildcard you choose 
 * in the event entity definition fits the function name here.
 *
 * @param $event_id
 *   Integer specifying the event id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $event object or FALSE if it cannot be loaded.
 *
 * @see event_load_multiple()
 */
function event_load($event_id, $reset = FALSE) {
  $events = event_load_multiple(array($event_id), array(), $reset);
  return reset($events);
}

/**
 * Load multiple events based on certain conditions.
 *
 * @param $event_ids
 *   An array of event IDs.
 * @param $conditions
 *   An array of conditions to match against the {event} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of event objects, indexed by event_id.
 *
 * @see entity_load()
 * @see event_load()
 */
function event_load_multiple($event_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('event', $event_ids, $conditions, $reset);
}

/**
 * Deletes an event.
 */
function event_delete(Event $event) {
  $event->delete();
}

/**
 * Delete multiple events.
 *
 * @param $event_ids
 *   An array of event IDs.
 */
function event_delete_multiple(array $event_ids) {
  entity_get_controller('event')->delete($event_ids);
}

/**
 * Create an event object.
 */
function event_create($values = array()) {
  return entity_get_controller('event')->create($values);
}

/**
 * Saves an event to the database.
 *
 * @param $event
 *   The event object.
 */
function event_save(Event $event) {
  return $event->save();
}

/**
 * URI callback for events
 */
function event_uri(Event $event) {
  return array(
    'path' => 'event/' . $event->event_id,
  );
}

/**
 * Menu title callback for showing individual entities
 */
function event_page_title(Event $event) {
  return $event->title;
}

/**
 * Sets up content to show an individual event
 * @todo - get rid of drupal_set_title();
 */
function event_page_view($event, $view_mode = 'full') {    
  $controller = entity_get_controller('event');  
  $content = $controller->view(array($event->event_id => $event));
  drupal_set_title($event->name);
  return $content;
}

/**
 * Implement hook_theme().
 */
function event_theme() {
  return array(
    'event_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'eventbrite.admin.inc',
    ),
    'event' => array(
      'render element' => 'elements',
      'template' => 'event',
    ),
   'event_sample_data' => array(
      'variables' => array('event_sample_data', 'event' => NULL),
      'template' => 'event-sample-data',
    ),


  );
}

/**
 * The class used for event entities
 */
class Event extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'event');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'event/' . $this->event_id);
  }
  
  
}

/**
 * The Controller for Event entities
 */
class EventController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create an event - we first set up the values that are specific
   * to our event schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the event.
   *
   * @return
   *   A event object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Event
    $values += array(
      'eid' => '',
      'oid' => '',
      'vid' => '',
      'is_new' => TRUE,
      'locale' => '',
      'timezone' => '',
      'category' => '',
      'capacity' => '',
      'num_attendee_rows' => '',
      'title' => '',
      'start_date' => '',
      'status' => '',
      'description' => '',
      'end_date' => '',
      'tags' => '',
      'timezone_offset' => '',
      'password' => '',
      'created' => '',
      'url' => '',
      'privacy' => '',
      'modified' => '',
      'repeats' => '',
    );
    
    $event = parent::create($values);
    return $event;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['event_sample_data'] =  array(
      '#markup' => theme('event_sample_data', array('event_sample_data' => check_plain($entity->data['sample_data']), 'event' => $entity)),
    );

    return $content;
  }
  
}
